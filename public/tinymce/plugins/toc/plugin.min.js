tinymce.PluginManager.add("toc", function (a) {
    function b(b) {
        return function () {
            var c = a.settings.link_list;
            "string" == typeof c
                ? c(b)
                : b(c);
        };
    }
    function c(a, b, c) {
        function d(a, c) {
            return (
                (c = c || []),
                tinymce.each(a, function (a) {
                    var e = { text: a.text || a.title };
                    a.menu ? (e.menu = d(a.menu)) : ((e.value = a.value), b && b(e)), c.push(e);
                }),
                c
            );
        }
        return d(a, c || []);
    }
    function generateSelector(depth) {
        var i, selector = [];
        for (i = 1; i <= depth; i++) {
            selector.push('h' + i+'[id]');
        }
        return selector.join(',');
    }
    function d(b) {
        function d(a) {
            var b = l.find("#text");
            (!b.value() || (a.lastControl && b.value() == a.lastControl.text())) && b.value(a.control.text()), l.find("#id").value(a.control.value());
        }
        function f() {
            !k && 0 === u.text.length && m && this.parent().parent().find("#text")[0].value(this.value());
        }
        function g(b) {
            var c = b.meta || {};
            o && o.value(a.convertURL(this.value(), "id")),
                tinymce.each(b.meta, function (a, b) {
                    l.find("#" + b).value(a);
                }),
                c.text || f.call(this);
        }
        function h(a) {
            var b = v.getContent();
            if (/</.test(b) && (!/^<h[1-6] [^>]+>[^<]+<\/h>$/.test(b) || -1 == b.indexOf("id="))) return !1;
            if (a) {
                var c,
                    d = a.childNodes;
                if (0 === d.length) return !1;
                for (c = d.length - 1; c >= 0; c--) if (3 != d[c].nodeType) return !1;
            }
            return !0;
        }
        function filter(str){
            str = str.toLowerCase();
            str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, "a");
            str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, "e");
            str = str.replace(/ì|í|ị|ỉ|ĩ/g, "i");
            str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, "o");
            str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, "u");
            str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, "y");
            str = str.replace(/đ/g, "d");
            str = str.replace(/!|@|%|\^|\*|\(|\)|\+|\=|\<|\>|\?|\/|,|\.|\:|\;|\'| |\"|\&|\#|\[|\]|~|$|_/g, "-");
            /* tìm và thay thế các kí tự đặc biệt trong chuỗi sang kí tự - */
            str = str.replace(/-+-/g, "-"); //thay thế 2- thành 1-
            str = str.replace(/^\-+|\-+$/g, "");
            //cắt bỏ ký tự - ở đầu và cuối chuỗi
            return str;
        }
        var i,
            j,
            jh,
            k,
            l,
            m,
            n,
            o,
            p,
            e,
            r,
            t,
            u = {},
            v = a.selection,
            w = a.dom;    
            
        (i = v.getNode()),
            (j = w.getParent(i, /^h[1-6]$/i.test(i.nodeName) ? i.nodeName : 'h2' + "[id]")),
            (jh = /^h[1-6]$/i.test(i.nodeName) ? i.nodeName.toLowerCase() : 'h2'),
            (m = h()),
            (u.text = k = j ? j.innerText || j.textContent : v.getContent({ format: "text" })),
            (u.id = j ? w.getAttrib(j, "id") : ""),
            (t = w.getAttrib(j, "rel")) && (u.rel = t),
            (t = jh) && (u["element"] = t),            
            (t = w.getAttrib(j, "class")) && (u["class"] = t),
            m &&
                (n = {
                    name: "text",
                    type: "textbox",
                    size: 40,
                    label: "Text to display",
                    onchange: function () {
                        u.text = this.value();
                    },
                }),
            b &&
                (o = {
                    type: "listbox",
                    label: "Link list",
                    values: c(
                        b,
                        function (b) {
                            b.value = a.convertURL(b.value || b.url, "id");
                        },
                        [{ text: "None", value: "" }]
                    ),
                    onselect: d,
                    value: a.convertURL(u.id, "id"),
                    onPostRender: function () {
                        o = this;
                    },
                }),
            a.settings.rel_list && (p = { name: "rel", type: "listbox", label: "Rel", values: c(a.settings.rel_list) }),
            a.settings.element_list !== !1 &&
                (a.settings.element_list || (a.settings.element_list = [
                        { text: "H2", value: "h2" },
                        { text: "H3", value: "h3" },
                        { text: "H4", value: "h4" },
                        { text: "H5", value: "h5" },
                        { text: "H6", value: "h6" },
                    ]),
                (e = {
                    name: "element",
                    type: "listbox",
                    label: "Element",
                    values: c(a.settings.element_list, function (b) {
                        b.value &&
                            (b.textStyle = function () {
                                return a.formatter.getCssText({ inline: "a", classes: [b.value] });
                            });
                    }),
                })),
            a.settings.head_class_list !== !1 &&
                (a.settings.head_class_list || (a.settings.head_class_list = [
                        { text: "Chọn Class", value: "" },
                        { text: "Toc Heading", value: "ft-heading" },
                    ]),
                (r = {
                    name: "class",
                    type: "listbox",
                    label: "Class",
                    values: c(a.settings.head_class_list, function (b) {
                        b.value &&
                            (b.textStyle = function () {
                                return a.formatter.getCssText({ inline: "a", classes: [b.value] });
                            });
                    }),
                })),
            (l = a.windowManager.open({
                title: "Insert Toc",
                data: u,
                body: [{ name: "id", type: "textbox", size: 40, autofocus: !0, label: "ID", onchange: g, onkeyup: f }, n, o, p, e, r],
                onSubmit: function (b) {
                    function d() {
                        var b = { 
                            id: u.id ? u.id : filter(u.text), 
                            rel: u.rel ? u.rel : null, 
                            element: u["element"] ? u["element"] : null,
                            class: u["class"] ? u["class"] : null
                        };
                        if(j == null){
                            j
                                ? (a.focus(), m && u.text != k && ("innerText" in j ? (j.innerText = u.text) : (j.textContent = u.text)), w.setAttribs(j, b), v.select(j), a.undoManager.add())
                                : m
                                ? a.insertContent(w.createHTML(u['element'], b, w.encode(u.text)))
                                : a.execCommand("mceInsertLink", !1, b);
                        } else {
                            a.insertContent(w.createHTML(u['element'], b, w.encode(u.text)));
                        }
                    }
                    return (
                        (u = tinymce.extend(u, b.data)),
                        (void d())
                    );
                },
            }));
    }    
    
    a.addButton("toc", { icon: true, image: tinyMCE.baseURL + "/plugins/toc/icon.svg", tooltip: "Insert/Toc", shortcut: "Meta+K", onclick: b(d), stateSelector: generateSelector(6) }),
    a.addShortcut("Meta+K", "", b(d)),
    a.addCommand("mceLink", b(d)),
    (this.showDialog = d),
    a.addMenuItem("toc", { icon: true, image: tinyMCE.baseURL + "/plugins/toc/icon.svg", text: "Insert/Toc", shortcut: "Meta+K", onclick: b(d), stateSelector: generateSelector(6), context: "insert", prependToContext: !0 });
});
